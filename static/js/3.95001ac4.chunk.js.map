{"version":3,"sources":["components/DecorContainer/DecorContainer.module.css","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","components/DecorContainer/DecorContainer.js","components/ContactsList/ContactsList.module.css","redux/contacts/contacts-selectors.js","components/ContactsList/ContactsList.js","components/ContactForm/ContactForm.js","components/Filter/Filter.js","pages/ContactsView.js"],"names":["module","exports","_slicedToArray","arr","i","Array","isArray","Symbol","iterator","Object","_arr","_n","_d","_e","undefined","_s","_i","next","done","push","value","length","err","unsupportedIterableToArray","TypeError","DecorContainer","title","children","className","s","decor","leftDecor","rightDecor","circleDecor","innerDecor","titleDecor","getContacts","state","contacts","items","getFilter","filter","contactsSelectors","getFilteredContacts","createSelector","contact","name","toLowerCase","includes","getIsLoading","loading","getError","error","ContactsList","dispatch","useDispatch","useEffect","contactsOperations","fetchContacts","filteredContacts","useSelector","isLoading","text","contactsList","map","id","number","href","toString","replace","btnDeleteContact","type","onClick","deleteContact","onDeleteContact","message","ContactForm","useState","setName","tel","setTel","reset","onSubmit","e","preventDefault","find","alert","checkUniqName","onCheckforUniqName","split","formatNumber","addContact","autoComplete","placeholder","onChange","target","pattern","minLength","maxLength","Filter","filterContacts","ContactsView"],"mappings":"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","file":"static/js/3.95001ac4.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"decor\":\"DecorContainer_decor__1hecY\",\"leftDecor\":\"DecorContainer_leftDecor__2-VAG\",\"rightDecor\":\"DecorContainer_rightDecor__2yBpA\",\"circleDecor\":\"DecorContainer_circleDecor__2AbIu\",\"innerDecor\":\"DecorContainer_innerDecor__10GZ3\",\"titleDecor\":\"DecorContainer_titleDecor__qzn6f\"};","import arrayWithHoles from \"@babel/runtime/helpers/esm/arrayWithHoles\";\nimport iterableToArrayLimit from \"@babel/runtime/helpers/esm/iterableToArrayLimit\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableRest from \"@babel/runtime/helpers/esm/nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import PropTypes from 'prop-types';\nimport s from './DecorContainer.module.css';\n\nfunction DecorContainer({ title, children }) {\n  return (\n    <>\n      <section className={s.decor}>\n        <div className={s.leftDecor}></div>\n        <div className={s.rightDecor}></div>\n        <div className={s.circleDecor}></div>\n        <div className={s.innerDecor}>\n          <h3 className={s.titleDecor}>{title}</h3>\n          {children}\n        </div>\n      </section>\n    </>\n  );\n}\n\nDecorContainer.propTypes = {\n  title: PropTypes.string,\n  children: PropTypes.oneOfType([\n    PropTypes.node,\n    PropTypes.arrayOf(PropTypes.node),\n  ]),\n};\n\nexport default DecorContainer;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"text\":\"ContactsList_text__3MnhQ\",\"contactsList\":\"ContactsList_contactsList__3gB0G\",\"contact\":\"ContactsList_contact__2xG2b\",\"name\":\"ContactsList_name__21X0A\",\"number\":\"ContactsList_number__3Gwd3\",\"btnDeleteContact\":\"ContactsList_btnDeleteContact__18dul\",\"phone\":\"ContactsList_phone__391YH\"};","import { createSelector } from '@reduxjs/toolkit';\n\nexport const getContacts = state => state.contacts.items;\nexport const getFilter = state => state.contacts.filter;\nexport const getFilteredContacts = createSelector(\n  [getContacts, getFilter],\n  (contacts, filter) =>\n    contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase()),\n    ),\n);\nexport const getIsLoading = state => state.contacts.loading;\nexport const getError = state => state.contacts.error;\n\nconst contactsSelectors = {\n  getContacts,\n  getFilter,\n  getFilteredContacts,\n  getIsLoading,\n  getError,\n};\nexport default contactsSelectors;\n","import PropTypes from 'prop-types';\nimport { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport { contactsSelectors, contactsOperations } from 'redux/contacts';\n\nimport s from './ContactsList.module.css';\n\nfunction ContactsList() {\n  const dispatch = useDispatch();\n\n  useEffect(() => dispatch(contactsOperations.fetchContacts()), [dispatch]);\n\n  const filteredContacts = useSelector(contactsSelectors.getFilteredContacts);\n  const isLoading = useSelector(contactsSelectors.getIsLoading);\n  const error = useSelector(contactsSelectors.getError);\n\n  const onDeleteContact = id => dispatch(contactsOperations.deleteContact(id));\n\n  return (\n    <>\n      {!isLoading && !error && filteredContacts.length < 1 && (\n        <p className={s.text}>Нет контактов</p>\n      )}\n\n      <ul className={s.contactsList}>\n        {filteredContacts.length > 0 &&\n          filteredContacts.map(({ id, name, number }) => (\n            <li key={id} className={s.contact}>\n              <span className={s.name}>{name}</span>\n              <span className={s.number}>\n                <a href={`number:+${number.toString().replace(/[^\\d;]/g, '')}`}>\n                  {number}\n                </a>\n              </span>\n              <button\n                className={s.btnDeleteContact}\n                type=\"button\"\n                onClick={() => onDeleteContact(id)}\n              >\n                x\n              </button>\n            </li>\n          ))}\n      </ul>\n      {isLoading && <h3> Загрузка ...</h3>}\n      {error && <h3>{error.message}</h3>}\n    </>\n  );\n}\n\nContactsList.propTypes = {\n  onDeleteContact: PropTypes.func,\n};\n\nexport default ContactsList;\n","import PropTypes from 'prop-types';\nimport { useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport {\n  contactsSelectors,\n  contactsOperations,\n  checkUniqName,\n} from 'redux/contacts';\n\nfunction ContactForm() {\n  const [name, setName] = useState('');\n  const [tel, setTel] = useState('');\n  const contacts = useSelector(contactsSelectors.getContacts);\n  const dispatch = useDispatch();\n\n  const handleChangeName = e => {\n    setName(e.target.value);\n  };\n\n  const handleChangeTel = e => {\n    setTel(e.target.value);\n  };\n\n  const onAdd = contact => dispatch(contactsOperations.addContact(contact));\n\n  const onCheckforUniqName = name => {\n    const uniqName = !!contacts.find(\n      contact => contact.name.toLowerCase() === name.toLowerCase(),\n    );\n    if (uniqName) {\n      alert(`${name} is already in contacts`);\n      reset();\n      return false;\n    }\n    if (!(name && tel)) {\n      alert('Empty field');\n      return false;\n    }\n\n    return dispatch(checkUniqName(name));\n  };\n\n  const formatNumber = tel => {\n    const arr = tel.split('');\n    return `+38 (${arr[0]}${arr[1]}${arr[2]}) ${arr[3]}${arr[4]}${arr[5]}-${arr[6]}${arr[7]}-${arr[8]}${arr[9]}`;\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    const checkUniqName = onCheckforUniqName(name);\n    if (!checkUniqName) return;\n\n    const number = formatNumber(tel);\n    onAdd({ name, number });\n    reset();\n  };\n\n  const reset = () => {\n    setName('');\n    setTel('');\n  };\n\n  return (\n    <>\n      <form onSubmit={handleSubmit} autoComplete=\"off\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          value={name}\n          placeholder=\"Введите имя\"\n          onChange={handleChangeName}\n        />\n        <input\n          type=\"tel\"\n          name=\"tel\"\n          value={tel}\n          pattern=\"[0-9]{10}\"\n          placeholder=\"067 123 45 67\"\n          minLength=\"10\"\n          maxLength=\"10\"\n          onChange={handleChangeTel}\n        />\n        <input type=\"submit\" value=\"Сохранить контакт\" />\n      </form>\n    </>\n  );\n}\n\nContactForm.propTypes = {\n  onAdd: PropTypes.func,\n  onCheckforUniqName: PropTypes.func,\n};\n\nexport default ContactForm;\n","import PropTypes from 'prop-types';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport { contactsSelectors, filterContacts } from 'redux/contacts';\n\nfunction Filter() {\n  const filter = useSelector(contactsSelectors.getFilter);\n  const dispatch = useDispatch();\n\n  const onFilter = e => dispatch(filterContacts(e.target.value));\n\n  return (\n    <>\n      <input\n        type=\"text\"\n        name=\"filter\"\n        value={filter}\n        placeholder=\"Поиск по имени ...\"\n        onChange={onFilter}\n        autoComplete=\"off\"\n      />\n    </>\n  );\n}\n\nFilter.propTypes = {\n  filter: PropTypes.string,\n  onFilter: PropTypes.func,\n};\n\nexport default Filter;\n","import { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport DecorContainer from '../components/DecorContainer';\nimport ContactsList from '../components/ContactsList';\nimport ContactForm from '../components/ContactForm';\nimport Filter from '../components/Filter';\nimport { contactsOperations } from '../redux/contacts';\n\nexport default function ContactsView() {\n  const dispatch = useDispatch();\n\n  useEffect(() => dispatch(contactsOperations.fetchContacts()), [dispatch]);\n\n  return (\n    <>\n      <DecorContainer title={'Телефонная книга'}>\n        <ContactForm />\n      </DecorContainer>\n      <DecorContainer title=\"Список контактов\">\n        <Filter />\n        <ContactsList />\n      </DecorContainer>\n    </>\n  );\n}\n"],"sourceRoot":""}